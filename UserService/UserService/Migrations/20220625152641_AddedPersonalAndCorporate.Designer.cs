// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserService.Entities;

namespace UserService.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220625152641_AddedPersonalAndCorporate")]
    partial class AddedPersonalAndCorporate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UserService.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("UserService.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Contact")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserService.Entities.CorporateUser", b =>
                {
                    b.HasBaseType("UserService.Entities.User");

                    b.Property<string>("CorporationName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PIB")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("CorporationName")
                        .IsUnique()
                        .HasFilter("[CorporationName] IS NOT NULL");

                    b.HasIndex("PIB")
                        .IsUnique()
                        .HasFilter("[PIB] IS NOT NULL");

                    b.ToTable("CorporateUsers");
                });

            modelBuilder.Entity("UserService.Entities.PersonalUser", b =>
                {
                    b.HasBaseType("UserService.Entities.User");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PersonalUsers");
                });

            modelBuilder.Entity("UserService.Entities.User", b =>
                {
                    b.HasOne("UserService.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserService.Entities.CorporateUser", b =>
                {
                    b.HasOne("UserService.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("UserService.Entities.CorporateUser", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserService.Entities.PersonalUser", b =>
                {
                    b.HasOne("UserService.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("UserService.Entities.PersonalUser", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
